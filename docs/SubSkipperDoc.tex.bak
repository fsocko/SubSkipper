%%--SubSkipper Documentation
%%--Modified 25/07/15

\documentclass{article}

%%--packages
\usepackage{hyperref}
\usepackage{listings}
\usepackage{color}


%%--Define style for Java code
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\lstset{frame=tb,
  language=Java,
  aboveskip=3mm,
  belowskip=3mm,
  showstringspaces=false,
  columns=flexible,
  basicstyle={\small\ttfamily},
  numbers=none,
  numberstyle=\tiny\color{gray},
  keywordstyle=\color{blue},
  commentstyle=\color{dkgreen},
  stringstyle=\color{mauve},
  breaklines=true,
  breakatwhitespace=true,
  tabsize=3
}


%%--commands
\newcommand{\degree}{$^{\circ}$}

\author{Filip Socko}
\title{SubSkipper Documentation}

\begin{document}

\maketitle

\section{Introduction}
The GitHub SubSkipper repository contains the core logic of the app, such that it can be verified or used for other projects. The documentation contains the principles and equations on which the logic is based, and some method documentation.

The main purpose of the repository and documentation is to record techniques and methods of early submarine attack techniques in a way which are simple to employ in computer programs (i.e. showing mathematical equations where possible), as well as acting as a reference for Submarine Simulators.
\\ \\
The Android App will be developed from this repository as a separate, polished product.

\section{Requirements}
The Requirements for SubSkipper are the following:

\begin{itemize}
\item{Calculate Constant Bearing Solutions using the following methods:}
	\begin{itemize}
	\item{Dick O'Kane method}
	\end{itemize}
\item{Show a representation of the \emph{Is/Was} or \emph{AngriffScheibe} calculator for easy input, along with its data}
\item{Calculate target location with a course and speed}
\item{Calculate \emph{AOB} from aspect ratio}
\item{Calculate Speed via \emph{Fixed Wire} method}
\item{Feature a Modular timer/stopwatch}
\end{itemize}

\pagebreak
\section{Unit Conversions}


\subsection{Speed}
\begin{center}
\begin{tabular}{r | r}
$1.0$ knots & $1.0$ NM per hour\\
$1.0$ m/s & $1.94384449$ knots\\
$1.0$ m/s & $3.6$ km/h\\
\end{tabular}
\end{center}

\subsection{Length}
\begin{center}
\begin{tabular}{r | r}
$1.0$ NM & $1852.0$ m\\
$1.0$ km & $0.539956803$ NM\\
$1.0$ NM & $2025.37$ yards\\
$1.0$ NM & $6076.12$ feet\\
$1.0$ m & $3.2808399$ feet\\
$1.0$ m & $1.0936133$ yards\\
\end{tabular}
\end{center}

\section{O'Kane Torpedo Solution}
The Dick O'Kane method was devised by members of the Subsim.com forums. It is a constant bearing method which relies on calculating a lead angle -- an angle on which torpedoes, if launched will intercept the course of the target-- to which the periscope is pointed. As parts of the target ship cross the bearing, torpedoes are fired along it. The O'Kane method relies on being ahead of the target, and the final AOB -- at which the torpedo strikes the target-- to be 90\degree .

Calculates \emph{lead angle} based on target and torpedo speed.\\
The solution requires submarine to be ahead of target.\\
Captain inserts target speed into TDC, puts the scope on the lead bearing, fires as the target crosses the bearing.

The Equation for lead angle is as follows:

$$ LeadAngle = 90 - \arctan\left( \frac{Torpedo Speed}{TargetSpeed} \right) $$

\subsection{Computational Solution}
The method \emph{oKSolution()} in the class \emph{OKane.class} in the package \emph{coreLogic} is used to calculate the O'Kane Lead Bearing when using the O'Kane method. The periscope is pointed to the lead bearing calculated by \emph{oKane()}.

The method takes the following arguments:

\begin{itemize}
\item{int AOB - For determining whether AOB is Port or Starboard}
\item{double targS - Target Speed}
\item{Torpedo fireS - Torpedo Speed}
\end{itemize}

\subsection{Errors}

Attempting to compute O'Kane Lead angle given the following situations will return the flag \emph{$-1$}.

\subsubsection{Submarine is not ahead of target:}
The following code checks if AOB is ahead of the target, either port or starboard.
Furthermore, if the submarine is at an AOB of 0, or 180, the O'Kane lead angle cannot be calculated.
\begin{lstlisting}
if(AOB <= 90 && AOB<360){
            stbd = true;
        }
        else if(AOB>=270 && AOB<360 ){
            stbd = false;
        }
        else if(AOB == 0){
            invalidSol = true;
\end{lstlisting}

\subsubsection{Torpedo Speed or Target Speed are less than one:}
torpS and targS are verified to be > 1 in the following code:
\begin{lstlisting}
 if(torpS < 1 || targS <1){
            return -1;}
\end{lstlisting}

\subsubsection{Lead is greater than 90}
If lead is more than 90\degree , it means we would be aiming the torpedo backwards. This means the solution is invalid, as either the target is too fast, or the torpedo too slow. This error is handled in the following code:

\begin{lstlisting}
if(lead > 90){
lead = -3;} //Okane relies on being ahead of the target,
						//we would be aiming backwards.
\end{lstlisting}

\subsubsection{Target Speed is 0}
If targS is 0, no lead is required and the method returns 0.
This error is handled in the following code:

\begin{lstlisting}
//If speed is 0, no lead required
            if(targS == 0){
            	return 0;
            }
\end{lstlisting}

\subsection{OKSolution Code}

\begin{lstlisting}

        public double OKSolution(int AOB, double targS, double torpFireS)
        {
            double solBearing = -1;

            boolean stbd = true;
            //check if the position is correct. Sub needs to be in front of target, on either
            //Stbd or port side. this means AOB is either 0-90 for stbd or  270-360 for port
            //if anything else happens, solution is invalid, and we return a flag.
            boolean invalidSol = false;
            
    		if(AOB == 0){
                invalidSol = true; //for now let's assume the user is an idiot if AOB = 0
    		}
    		else if(AOB <= 90 && AOB<360){
                stbd = true;
            }
            else if(AOB>=270 && AOB<360 ){
                stbd = false;
            }
            
            else{invalidSol = true;}

            if(invalidSol){
                return solBearing;
            }
            
            //Check if OKaneLead returns an error
            double lead = okaneLead(torpFireS, targS);
            if(lead == -3){
            	return -1;
            }
           
            //if stbd, subtract from 360.
            else if(stbd){
                solBearing = 360-okaneLead(torpFireS, targS);
            }
            //If port, add to 0 for lead bearing.
            else{
                solBearing = 0 + okaneLead(torpFireS, targS);
            }
            return solBearing; //tSpeed into TDC, set your scope to this bearing, fire
        }

        //Input: torpedo speed (kn), target speed (kn)
        private double okaneLead(double torpS, double targS){
            if((torpS < 0) || (targS <0)){
                return -3;}
            //If speed is 0, no lead required
            if(targS == 0){
            	return 0;
            }
            double lead = 0;
            //90 - inverseTan(torpS/targS)
            lead =  90-Math.toDegrees(Math.atan(torpS/targS));
            if(lead > 90){
                lead = -3;} //Okane relies on being ahead of the target,
            //we would be aiming backwards.

            return lead;
        }
 
\end{lstlisting}

\section{Calculating Distance To Target}

No methods for calculating Distance To Target will be provided as solutions such as a periscope stadimeter and \emph{sonar} are readily available.

\section{Calculating AOB Based on Aspect Ratio}

AOB can be determined given the following data:
\begin{itemize}
\item{Range To Target}
\item{Observed Mast Height}
\item{Observed Ship Length}
\item{Reference Aspect Ratio (i.e. $\frac{Reference Length}{Reference Mast Height}$)}
\end{itemize}

1. Determine an observed and reference \emph{aspect ratio}.
$$AR_{observed} = \frac{Observed Length}{Observed Mast Height}$$
Do the same with data from the recognition manual for the reference Aspect Ratio (\emph{ARreference}). \\ \\
2.
$$AOB = arcSin \frac{AR_{observed}}{AR_{reference}}$$
Note: This method is less accurate as AOB approaches 0.
Note: This method does not compute whether the AOB is on the port or starboard side.
Note: "The AOB can only go up to 90, and gives no indication of starboard or port side showing. You have to determine that visually. If the target is moving away from you, you have to subtract the given angle from 180." -UJagd Tools

\end{document}

\section{Find the speed of a target with constant relative bearing}

This technique takes advantage of the fact that if you are on a convergent course (moving towards each other), and the target’s bearing is not changing over time, then you are actually on a collision course. Since you know your Uboat’s speed and two angles of the triangle (AOB and target bearing), you can calculate the target’s speed.

$$Target speed = Own speed \left( \frac{sin(TB)}{sin (AOB)} \right)$$

You are maintaining 2 knots on an intercept course with a potential target. At the original observation, it was on a bearing of 280\degree with an observed angle on the bow of 20 \degree starboard. After several minutes, the bearing was still 280\degree.

Note: Although you may not be able to achieve an attack position, this technique will also work to calculate the target’s speed if you are on divergent courses. !If an angle is greater than 90\degree, then simply subtract it from 180\degree (since the sine function is symmetrical around 90\degree).

$$Target speed = Own speed \left( \frac{sin(180-TB)}{sin (180-AOB)} \right)$$

\section{Determine the distance to the track of a target}

As you manoeuver into a firing position, it is useful to know your distance to the track of your target. Knowing the range and AOB of the target:

Track: intersection point between Submarine course and the current target course.

$$Distance to Track = Range \left( sin(AOB) \right)$$

\section{Determine an optimum speed for attack position}


\pagebreak
\section{References}

Kriegsmarine Angriffscheibe Handbuch, H{\"a}hl, 2008 (packaged with u-jagd tools)

Torpedo Vorhaltrechner Project, 2015
\url{http://www.tvre.org/en/acquiring-torpedo-firing-data}

\end{document}

