\section{Core Logic}

\subsection{AspectAOB.java}
//Wrapper for calculateAOB, calculates AOB bearing with AOB estimate checking against
//a visual estimate of AOB due to the limits of this method.
	
//Errors: -1: NaN found in observed AR
// 		  -2: Observed aspect > Ref Aspect
//Both of these need to be validated at input.

Methods:
 \begin{itemize}
 \item{public double aspectAOB(int estAOB, Ship target, double mastObs, double lenObs)}
 \end{itemize}
	
	
	
\subsection{FileIO.java}

//WriteLine will overwrite the file,
	//make sure all vars are compiled into a single string before writing.
	public void writeLine(String file, String text)

Methods:
\begin{itemize}
\item{public void writeLine(String file, String text)}
\end{itemize}


\subsection{Nomo.java}
	//Nomograph Logic:
	//Inputs: speed (m/s), distance(m), time(s)
	//Returns a string which contains the missing value.
	//Missing value must be a double, size 0.
	
Methods:
\begin{itemize}
\item{public String nomo(double s, double d, double t)}
\end{itemize}


\subsection{OKane.java}
//Lead Angle for O'Kane firing solution. - note that method does
//not know whether to add or subtract ie if T is facing port or
//stbd

 Methods:
 \begin{itemize}
 \item{public double OKSolution(int AOB, double targS, double torpFireS)}
 \end{itemize}
 

\subsection{OutFormat.java}

 \begin{itemize}
 \item{public String degreeOut(double degIn)
 \item{public String msToKnot(double ms) @deprecated
 \item{public String mToFt(double m) @deprecated
 
\item{public String addUnit(double i, String u)
//Add Units to a double-2DP formatter
//TODO: make this method not apply a formatter.\\
output: i (twoDP) + " " + u}


\item{public String twoDP(double twoDP){
//Two figures after decimal}


\item{public String fourDP(double fourDP){
//Four figures after decimal}

\item{
public String hourOut(double secondIn) //Formats seconds into hours:minutes:seconds}
\end{itemize}

\subsection{Ship.java}
//Ship Object. Parse from file to this object, then write to XML file for use.

public Ship(String name, int type, String typeName, String imagePath, double maxSpeed, double length, double width,
			double mast, double draft, double disp)
 
 Properties:
 \begin{itemize}
 	
\item{\item{		super();
\item{this.ID = 0;}
\item{this.nation = "none"; //TODO Once I figure out how nations are assigned in recog.Manual
\item{this.name = name;}
\item{this.type = type;}
\item{this.typeName = typeName;}
\item{this.imagePath = imagePath;}
\item{this.maxSpeed = maxSpeed;}
\item{this.length = length;}
\item{this.width = width;}
\item{this.mast = mast;}
\item{this.draft = draft;}
\item{this.disp = disp;}
\item{this.refAspect = length / mast;}
 \end{itemize}
 
 
 Methods:
 \begin{itemize}
 	item{public int getID()}
	public void setID(int iD)
	item{public String getName()}
	public void setName(String name)
	item{public int getType()}
	
	item{public void setType(int type)}
	public String getTypeName()
	item{public void setTypeName(String typeName)}
	public String getImagePath()
	item{public void setImagePath(String imagePath) }
			output: this.imagePath = "\"" + imagePath + "\"";
	item{public double getMaxSpeed()}
	public void setMaxSpeed(double maxSpeed)
	item{public double getLength()}
	public void setLength(double length)
	item{public double getWidth()}

	public void setWidth(double width)
	item{public double getMast()}
	public void setMast(double mast)
	item{public double getDraft()}
	public void setDraft(double draft)
	item{public double getDisp()}
	public void setDisp(double disp)
	item{public double getRefAspect()}
	item{public void setRefAspect(double refAspect)}

	public String toString() {
			return "Ship [ID=" + ID + ", name=" + name + ", type=" + type + ", typeName=" + typeName + ", imagePath="}
				+ imagePath + ", maxSpeed=" + maxSpeed + ", length=" + length + ", width=" + width + ", mast=" + mast
				item{+ ", draft=" + draft + ", disp=" + disp + ", refAspect=" + refAspect + "]";}
	}
	
	item{//Converts relevant measurements to "wrong" units - feet}
	public void makeImperial()
 \end{itemize}

\subsection{Torpedo.java}
\subsection{UnitConversions.java}


\subsection{MethodTest.java}
Main method for testing coreLogic.